{"version":3,"sources":["webpack:///./src/components/App/app.js","webpack:///./src/pages/index.js"],"names":["App","state","showScrim","showPanel","textFilter","updateTextFilter","value","console","log","this","setState","toLowerCase","render","files","props","data","filesData","react_default","a","createElement","Layout","layouts","filesList","Component","__webpack_require__","d","__webpack_exports__","query","IndexPage","_ref","app"],"mappings":"uJA8BeA,qKAvBbC,MAAQ,CACNC,WAAW,EACXC,WAAW,EACXC,WAAY,4CAGdC,iBAAA,SAAiBC,GACfC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEN,WAAYE,EAAMK,mBAGpCC,OAAA,WAAS,IAEDC,EADcJ,KAAKK,MAAMC,KAAzBC,UACAH,MAEN,OACEI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAeC,UAAWT,EAAOT,WAAYK,KAAKR,MAAMG,kBAlB9CmB,cCNlBC,EAAAC,EAAAC,EAAA,0BAAAC,IAMeC,UAFG,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,KAAH,OAAcE,EAAAC,EAAAC,cAACW,EAAD,CAAKf,KAAMA,KAA3C,IAIaY,EAAK","file":"component---src-pages-index-js-d018955d3a580dd6da36.js","sourcesContent":["import React, { Component } from 'react'\nimport Layout from '../Layout'\nimport { TermsList as GlossaryTerms } from '../../layouts'\nimport '../../static/css/reset.css'\nimport '../../templates/globals.css'\n\nclass App extends Component {\n  state = {\n    showScrim: false,\n    showPanel: false,\n    textFilter: null,\n  }\n\n  updateTextFilter(value) {\n    console.log(value)\n    this.setState({ textFilter: value.toLowerCase() })\n  }\n\n  render() {\n    let { filesData } = this.props.data\n    let { files } = filesData\n\n    return (\n      <Layout>\n        <GlossaryTerms filesList={files} textFilter={this.state.textFilter} />\n      </Layout>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport App from '../components/App'\n\nconst IndexPage = ({ data }) => <App data={data} />\n\nexport default IndexPage\n\nexport const query = graphql`\n  {\n    filesData: allFile(\n      filter: { relativeDirectory: { eq: \"terms\" } }\n      sort: { fields: [name] }\n    ) {\n      files: edges {\n        file: node {\n          id\n          relativePath\n          relativeDirectory\n          name\n          publicURL\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    navigation: allTermsJson(\n      filter: { types: { eq: \"glossary\" } }\n      sort: { fields: [title] }\n    ) {\n      termsList: edges {\n        term: node {\n          name: title\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}